if __name__ == "__main__":
  '''
  heap=BinaryHeap()
  heap._push('eins',1)
  heap._push('zwei',2)
  print(heap._array,heap._arridx)
  heap._swap(0,1)
  print(heap._array,heap._arridx)
  print(heap.extractMin())
  print(heap._array,heap._arridx)
  print(heap.extractMin())
  print(heap._array,heap._arridx)
 
  heap._push('vier',4)
  heap.adjustFromHigh()
  heap._push('drei',3)
  heap.adjustFromHigh()
  heap._push('zwei',2)
  heap.adjustFromHigh()
  heap._push('eins',1)
  heap.adjustFromHigh()
  print(heap._array,heap._arridx)
  print(heap.extractMin())
  print(heap._array,heap._arridx)
  heap.adjustFromLow()
  print(heap._array,heap._arridx)

  '''
  import cProfile
  import time
  import random


  
  
  #cProfile.run('testme()')
  cProfile.runctx('testme()', globals(), locals(), filename=None) 

'''

    Z = 1000
    N = 10000

    #for N in range(1000,2000,1000):
    print(N)
    t1 = time.time()
    heap = BinaryHeap()
    for n in range(N):
        z = random.randint(0, Z)
        heap.insert(z, z)
    t2 = time.time()
    for n in range(N - 1, -1, 1):
        element = heap._array[n]
        heap.decreaseKey(element[1], *element[0] // 2)
    t3 = time.time()


    z = (-1, 'minus')
    for n in range(N):
        p = z
        z = heap.extractMin()
        assert p[0] <= z[0]
        print(z)

    t4 = time.time()
    print(t2 - t1, t3 - t2, t4 - t3)

    import heapq
    t1 = time.time()
    heap = []
    for n in range(N):
        z = random.randint(0, Z)
        heapq.heappush(heap, (
            z,
            z,
        ))
    t2 = time.time()
    for n in range(N):
        z = heapq.heappop(heap)
    t3 = time.time()
    print(t2 - t1, t3 - t2)
  
  t1=time.time()
  heap=[]
  for n in range(N):
    z=random.randint(0,Z)
    heap.append((z,z,))
  t2=time.time()
  for n in range(N):
    z=min(heap)
    heap.remove(z)
  t3=time.time()
  print(t2-t1, t3-t2)

    # N=100000
    # 1.7948009967803955 10.011826515197754
    # 0.7236723899841309  0.703402042388916

    # N=1 000 000
    # 18.41075372695923 126.87462162971497
    #  7.515984535217285 11.875643014907837

  20000
  0.3932027816772461 1.9211945533752441
  0.1891782283782959 0.04058694839477539
  0.17211699485778809 53.48008179664612


  t1=time.time()
  heap=BinaryHeap()
  for n in range(N):
    z=random.randint(0,Z)
    heap.insert(z,z)
  p=-1
  t2=time.time()
  for n in range(N):
    z=heap.extractMin()[0]
    assert (p<=z)
    p=z
  t3=time.time()
  print(t2-t1, t3-t2)

5000
0.05286550521850586 0.35317420959472656
0.019818782806396484 0.006810903549194336
0.07229804992675781 2.4304685592651367
6000
0.10906076431274414 0.37595415115356445
0.07259917259216309 0.008961677551269531
0.019653797149658203 3.600896120071411
7000
0.11503291130065918 0.5191431045532227
0.08148503303527832 0.010499000549316406
0.05264115333557129 5.122507333755493
8000
0.16821956634521484 0.5456705093383789
0.0824270248413086 0.01249837875366211
0.07876873016357422 6.608936309814453
9000
0.177504301071167 0.6252915859222412
0.07309174537658691 0.01392507553100586
0.08079934120178223 8.463647365570068
10000
0.1884317398071289 0.7822599411010742
0.07482671737670898 0.023734331130981445
0.08028244972229004 11.130469560623169
11000
0.18699073791503906 0.817629337310791
0.0984189510345459 0.06424665451049805
0.038453102111816406 13.982973098754883
12000
0.20253419876098633 0.9697561264038086
0.10094070434570312 0.02546381950378418
0.08710741996765137 16.8308527469635
13000
0.20267629623413086 0.9922051429748535
0.1183936595916748 0.05972146987915039
0.08986878395080566 19.50955843925476
14000
0.20208024978637695 1.1019575595855713
0.10872054100036621 0.07537317276000977
0.09892392158508301 22.82890033721924
15000
0.28109121322631836 1.2120780944824219
0.10871648788452148 0.07630658149719238
0.10407137870788574 25.904033660888672
16000
0.28481268882751465 1.3109979629516602
0.11466264724731445 0.0808560848236084
0.10350966453552246 30.704346895217896
17000
0.3737771511077881 1.4331271648406982
0.17427492141723633 0.08377337455749512
0.08334088325500488 54.52591395378113
18000
0.3146240711212158 1.7326726913452148
0.13170671463012695 0.149092435836792
0.15491652488708496 42.4525625705719
19000
0.29967212677001953 1.3675720691680908
0.14496541023254395 0.06975126266479492
0.1444079875946045 43.85888600349426


100000
1.9067883491516113 10.903584003448486
0.819746732711792 0.6146488189697266
200000
3.7409048080444336 23.666102647781372
1.6239128112792969 1.4925997257232666
300000
5.5978522300720215 37.21655225753784
2.506669521331787 2.379807472229004
400000
7.416184663772583 50.604434967041016
3.204763174057007 3.562169075012207
500000
9.652623414993286 64.3577995300293
4.0208799839019775 4.383858680725098
600000
11.384038209915161 80.30065393447876
5.0384180545806885 5.675426959991455
700000
13.895907402038574 94.50602126121521
5.870716571807861 6.636824607849121
800000
15.39035153388977 109.21634769439697
6.557849168777466 8.008188724517822
900000
17.291008234024048 123.97108697891235
7.446871757507324 9.219743251800537
1000000
18.38951301574707 137.5108187198639
8.161421775817871 10.445523977279663
'''
